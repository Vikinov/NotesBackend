{"version":3,"sources":["parta/Note.js","parta/Notification.js","parta/Footer.js","services/notes.js","parta/App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","footerStyle","color","fontStyle","fontSize","Footer","style","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","toggleImportanceOf","find","changedNote","returnedNote","map","catch","error","setTimeout","filter","notesToShow","key","onSubmit","event","preventDefault","newNoteObj","length","date","Date","toISOString","Math","random","concat","value","onChange","target","placeholder","type","ReactDOM","render","document","getElementById"],"mappings":"+NAceA,MAZf,YAA0C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,iBAEZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCMjCK,MAbf,YAAmC,IAAXC,EAAU,EAAVA,QAEpB,OAAe,OAAZA,EACQ,KAIP,yBAAKJ,UAAU,SACTI,ICRRC,EAAc,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAYCC,MATf,WACI,OACI,yBAAKC,MAAOL,GACR,6BACA,kE,gBCYG,GAAEM,OAlBF,WAGX,OADgBC,IAAMC,IAJV,cAKGC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAepBC,OAZV,SAAAC,GAGX,OADgBN,IAAMO,KAVV,aAUwBD,GACrBJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QASZI,OANlB,SAACC,EAAIH,GAGhB,OADgBN,IAAMU,IAAN,UAhBJ,aAgBI,YAAwBD,GAAMH,GAC/BJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,S,4NCoK9BO,MAhLf,SAAaC,GAAM,MA8BWC,mBAAS,IA9BpB,mBA8BRC,EA9BQ,KA8BDC,EA9BC,OA+BeF,mBAAS,IA/BxB,mBA+BRG,EA/BQ,KA+BCC,EA/BD,OAgCeJ,oBAAS,GAhCxB,mBAgCRK,EAhCQ,KAgCCC,EAhCD,OAkC2BN,mBAAS,MAlCpC,mBAkCPO,EAlCO,KAkCOC,EAlCP,KA8CfC,oBAAU,WAONC,EACKxB,SACAG,KAAK,SAAAsB,GACFT,EAASS,MAIlB,IAcH,IAAMC,EAAqB,SAAAhB,GACvB,IAAMzB,EAAO8B,EAAMY,KAAK,SAAA1C,GAAI,OAAIA,EAAKyB,KAAOA,IACtCkB,E,qVAAW,IAAO3C,EAAP,CAAaG,WAAYH,EAAKG,YAQ/CoC,EACKf,OAAOC,EAAIkB,GACXzB,KAAK,SAAA0B,GACFb,EAASD,EAAMe,IAAI,SAAA7C,GAAI,OAAIA,EAAKyB,KAAOA,EAAKzB,EAAO4C,OAEtDE,MAAM,SAAAC,GACHV,EAAgB,SAAD,OACFrC,EAAKK,QADH,sCAGf2C,WAAW,WACPX,EAAgB,OACjB,KACHN,EAASD,EAAMmB,OAAO,SAAAjD,GAAI,OAAIA,EAAKyB,KAAOA,QAOhDyB,EAAchB,EAAUJ,EAAQA,EAAMmB,OAAO,SAAAjD,GAAI,OAAIA,EAAKG,YA+ChE,OACI,6BACI,qCACA,kBAAC,EAAD,CAAcK,QAAS4B,IACvB,6BACI,4BAAQ9B,QAAS,kBAAM6B,GAAYD,KAC9BA,EAAU,YAAc,QAGjC,4BAtDWgB,EAAYL,IAAI,SAAA7C,GAAI,OACnC,kBAAC,EAAD,CACAmD,IAAKnD,EAAKyB,GACVzB,KAAMA,EACNC,iBAAkB,kBAAMwC,EAAmBzC,EAAKyB,UAqD5C,0BAAM2B,SAjDE,SAACC,GACbA,EAAMC,iBAEN,IAAMC,EAAa,CACf9B,GAAIK,EAAM0B,OAAS,EACnBnD,QAAS2B,EACTyB,MAAM,IAAIC,MAAOC,cACjBxD,UAAWyD,KAAKC,SAAW,IAiB/BtB,EACKlB,OAAOkC,GACPrC,KAAK,SAAA0B,GACFb,EAASD,EAAMgC,OAAOlB,IACtBX,EAAW,QAsBX,2BACI8B,MAAO/B,EACPgC,SApBS,SAACX,GAEtBpB,EAAWoB,EAAMY,OAAOF,QAmBZG,YAAY,kBAEhB,4BAAQC,KAAK,UAAb,SAEJ,kBAAC,EAAD,QC/JZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.506cc131.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Note({ note, toggleImportance }){\r\n\r\n    const label = note.important ? 'make not important' : 'make important';\r\n\r\n    return (\r\n        <li className='note'>\r\n            {note.content} \r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note;","import React from 'react';\r\n\r\nfunction Notification({ message }){\r\n\r\n    if(message === null){\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            { message }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\n\r\nconst footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n}\r\n\r\nfunction Footer(){\r\n    return(\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Full Stack Open Course</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import axios from 'axios';\r\n\r\n//const baseUrl = 'http://localhost:3001/notes';\r\n//const baseUrl = 'https://glacial-beach-74614.herokuapp.com/notes';\r\nconst baseUrl = '/api/notes';\r\n\r\nconst getAll = () => {\r\n    //return axios.get(baseUrl);\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    // return axios.post(baseUrl, newObject);\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    // return axios.put(`${baseUrl}/${id}`, newObject);\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react';\r\n//import axios from 'axios';\r\n\r\nimport Note from './Note';\r\nimport Notification from './Notification';\r\nimport Footer from './Footer';\r\n\r\nimport noteService from '../services/notes';\r\n\r\nfunction App(props){\r\n    \r\n    // const {notes} = props;\r\n    \r\n    // return (\r\n    //     <div>\r\n    //         <h1>Notes</h1>\r\n    //         <ul>\r\n    //             <li>{notes[0].content}</li>\r\n    //             <li>{notes[1].content}</li>\r\n    //             <li>{notes[2].content}</li>\r\n    //         </ul>\r\n    //     </div>\r\n    // );\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <h1>Notes</h1>\r\n    //         <ul>\r\n    //             { notes.map(note => <li>{note.content}</li>) }\r\n    //         </ul>\r\n    //     </div>\r\n    // );\r\n\r\n    // const rows = () => notes.map(note => \r\n    //     <li key={note.id}>\r\n    //         {note.content}\r\n    //     </li>\r\n    // );\r\n\r\n    const [notes, setNotes] = useState([]);\r\n    const [newNote, setNewNote] = useState('');\r\n    const [showAll, setShowAll] = useState(true);\r\n\r\n    const [ errorMessage, setErrorMessage ] = useState(null);\r\n    \r\n    // useEffect(() => {\r\n    //     //console.log('effect');\r\n    //     axios\r\n    //         .get('http://localhost:3001/notes')\r\n    //         .then(response => {\r\n    //             //console.log('promise fulfilled')\r\n    //             setNotes(response.data);\r\n    //         })\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        // noteService\r\n        // .getAll()\r\n        // .then(response => {\r\n        //     setNotes(response.data);\r\n        // })\r\n\r\n        noteService\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNotes(initialNotes);\r\n            })\r\n\r\n\r\n    }, [])\r\n\r\n    // const toggleImportanceOf = id => {\r\n    //     const url = `http://localhost:3001/notes/${id}`;\r\n    //     const note = notes.find(n => n.id === id);\r\n    //     const changedNote  = {...note, important: !note.important};\r\n\r\n    //     axios\r\n    //     .put(url, changedNote)\r\n    //     .then(response => {\r\n    //         setNotes(notes.map(note => note.id !== id ? note : response.data))\r\n    //     })\r\n    // }\r\n\r\n    const toggleImportanceOf = id => {\r\n        const note = notes.find(note => note.id === id);\r\n        const changedNote = {...note, important: !note.important};\r\n\r\n        // noteService\r\n        // .update(id, changedNote)\r\n        // .then(response => {\r\n        //     setNotes(notes.map(note => note.id !== id ? note : response.data))\r\n        // })\r\n\r\n        noteService\r\n            .update(id, changedNote)\r\n            .then(returnedNote => {\r\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage(\r\n                    `Note '${note.content}' was already removed from server`\r\n                )\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n                setNotes(notes.filter(note => note.id !== id));\r\n            })\r\n\r\n    }\r\n\r\n    //console.log('render', notes.length, 'notes');\r\n\r\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\r\n\r\n    const rows = () => notesToShow.map(note => \r\n        <Note \r\n        key={note.id}\r\n        note={note}\r\n        toggleImportance={() => toggleImportanceOf(note.id)}\r\n        />    \r\n    );\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newNoteObj = {\r\n            id: notes.length + 1,\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5\r\n        }\r\n\r\n        // axios\r\n        // .post('http://localhost:3001/notes', newNoteObj)\r\n        // .then(response => {\r\n        //     setNotes(notes.concat(response.data));\r\n        //     setNewNote('');  \r\n        // })\r\n\r\n        // noteService\r\n        // .create(newNoteObj)\r\n        // .then(response => {\r\n        //     setNotes(notes.concat(response.data));\r\n        //     setNewNote('');\r\n        // })\r\n\r\n        noteService\r\n            .create(newNoteObj)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote));\r\n                setNewNote('');\r\n            })\r\n    }\r\n\r\n    const handleNoteChange = (event) => {\r\n        //console.log(event.target.value);\r\n        setNewNote(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <div>\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                    {showAll ? 'Important' : 'All'}\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {rows()}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input \r\n                    value={newNote}\r\n                    onChange={handleNoteChange}\r\n                    placeholder='A new note...'\r\n                />\r\n                <button type='submit'>save</button>\r\n            </form>\r\n            <Footer />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\n// import axios from 'axios';\n\nimport App from './parta/App';\n\n// const promise = axios.get('http://localhost:3001/notes');\n\n// promise.then(response => {\n//   console.log(response);\n// })\n\n// axios.get('http://localhost:3001/notes').then(response => {\n//     const notes = response.data;\n//     ReactDOM.render(<App notes={notes} />, document.getElementById('root'));\n// })\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n//Part A\n// const notes = [\n//     {\n//       id: 1,\n//       content: 'HTML is easy',\n//       date: '2019-05-30T17:30:31.098Z',\n//       important: true\n//     },\n//     {\n//       id: 2,\n//       content: 'Browser can execute only Javascript',\n//       date: '2019-05-30T18:39:34.091Z',\n//       important: false\n//     },\n//     {\n//       id: 3,\n//       content: 'GET and POST are the most important methods of HTTP protocol',\n//       date: '2019-05-30T19:20:14.298Z',\n//       important: true\n//     }\n// ]\n\n\n\n"],"sourceRoot":""}